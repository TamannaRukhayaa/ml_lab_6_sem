{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPxkbsbs3zSEC/lNsWI4cX3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":556},"id":"yvDiHvAorXHp","executionInfo":{"status":"ok","timestamp":1741587308089,"user_tz":-330,"elapsed":4572,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"20d968c1-ba62-44c7-94dd-fc0b608ab291"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([859554.79452055])"]},"metadata":{},"execution_count":1},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#lab2 linear regression code 1\n","# -*- coding: utf-8 -*-\n","\"\"\"Linear-Regression-Housing_Area_Price.ipynb\n","\n","Automatically generated by Colab.\n","\n","Original file is located at\n","    https://colab.research.google.com/drive/1CAlZml-P6V2V1RIrodgMfF8L3Ux4V9FT\n","\"\"\"\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn import linear_model\n","import matplotlib.pyplot as plt\n","\n","df = pd.read_csv('housing_area_price.csv')\n","df\n","\n","# Commented out IPython magic to ensure Python compatibility.\n","# %matplotlib inline\n","plt.xlabel('area')\n","plt.ylabel('price')\n","plt.scatter(df.area,df.price,color='red',marker='+')\n","\n","new_df = df.drop('price',axis='columns')\n","new_df\n","\n","price = df.price\n","price\n","\n","# Create linear regression object\n","reg = linear_model.LinearRegression()\n","reg.fit(new_df,price)\n","\n","\"\"\"(1) Predict price of a home with area = 3300 sqr ft\"\"\"\n","\n","reg.predict([[3300]])\n","\n","reg.coef_\n","\n","reg.intercept_\n","\n","\"\"\"Y = m * X + b (m is coefficient and b is intercept)\"\"\"\n","\n","3300*135.78767123 + 180616.43835616432\n","\n","\"\"\"(1) Predict price of a home with area = 5000 sqr ft\"\"\"\n","\n","reg.predict([[5000]])"]},{"cell_type":"code","source":["#code 2\n","# -*- coding: utf-8 -*-\n","\"\"\"Multiple_LR_HomePrice.ipynb\n","\n","Automatically generated by Colab.\n","\n","Original file is located at\n","    https://colab.research.google.com/drive/1fK78C8TPV44HdvT6lsMhaau2wMtKXquQ\n","\"\"\"\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn import linear_model\n","\n","df = pd.read_csv('homeprices_Multiple_LR.csv')\n","df\n","\n","\"\"\"Data Preprocessing: Fill NA values with median value of a column\"\"\"\n","\n","df.bedrooms.median()\n","\n","df.bedrooms = df.bedrooms.fillna(df.bedrooms.median())\n","df\n","\n","reg = linear_model.LinearRegression()\n","reg.fit(df.drop('price',axis='columns'),df.price)\n","\n","reg.coef_\n","\n","reg.intercept_\n","\n","\"\"\"Find price of home with 3000 sqr ft area, 3 bedrooms, 40 year old\"\"\"\n","\n","reg.predict([[3000, 3, 40]])\n","\n","112.06244194*3000 + 23388.88007794*3 + -3231.71790863*40 + 221323.00186540384"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"bnM7E9sQsWu6","executionInfo":{"status":"ok","timestamp":1741587381075,"user_tz":-330,"elapsed":20,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"11ca4fee-af3f-4dad-89e0-9be61a1169cb"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["498408.25157402386"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["#code 3 q1 canada\n","from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"0i_5X-ohuUS7","executionInfo":{"status":"ok","timestamp":1741588482993,"user_tz":-330,"elapsed":18851,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"718888a5-2511-4101-ce83-764efe44d379"},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-28221305-c792-4534-bd2d-c2ad751bf334\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-28221305-c792-4534-bd2d-c2ad751bf334\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving canada_per_capita_income.csv to canada_per_capita_income.csv\n"]}]},{"cell_type":"code","source":["#canada\n","import pandas as pd\n","import io\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.linear_model import LinearRegression\n","\n","df = pd.read_csv(\"canada.csv\")\n","print(df.head())\n","missing_values = df.isnull().sum()\n","# Display columns with missing values\n","print(missing_values[missing_values > 0])\n","\n","df.drop_duplicates(inplace = True)\n","\n","plt.xlabel('year')\n","plt.ylabel('per capita income')\n","plt.scatter(df['year'], df['per capita income (US$)'], color='red', marker='+')\n","plt.show()\n","\n","X = df[['year']] #independent variable (predictor)\n","y = df['per capita income (US$)'] #dependent variable (target)\n","\n","reg = LinearRegression()#req 2 parameters\n","reg.fit(X,y)\n","predicted_income = reg.predict([[2025]])\n","print(predicted_income)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":643},"id":"KBS-JqVZw4AL","executionInfo":{"status":"ok","timestamp":1741588750424,"user_tz":-330,"elapsed":953,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"409cf9f4-35f7-40ff-d839-5ea9fc646c32"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["   year  per capita income (US$)\n","0  1970              3399.299037\n","1  1971              3768.297935\n","2  1972              4251.175484\n","3  1973              4804.463248\n","4  1974              5576.514583\n","Series([], dtype: int64)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[45431.01947053]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["#code 4\n","#ssalary\n","from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"wAxZLbyVx6Wr","executionInfo":{"status":"ok","timestamp":1741588825944,"user_tz":-330,"elapsed":9933,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"cec11a92-0b77-4dfe-f830-375d479f366a"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-137a164d-f0b3-4a41-bcd0-a9fb48948c3a\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-137a164d-f0b3-4a41-bcd0-a9fb48948c3a\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving salary.csv to salary (1).csv\n"]}]},{"cell_type":"code","source":["#salary\n","import pandas as pd\n","import io\n","from sklearn import linear_model\n","import numpy as np\n","\n","\n","df = pd.read_csv(\"salary.csv\")\n","print(df.head())\n","\n","df.replace(' ',np.nan,inplace = True)\n","print(df.head())\n","\n","missing_values = df.isnull().sum()\n","# Display columns with missing values\n","print(missing_values[missing_values > 0])\n","\n","#handle missing values\n","from sklearn.impute import SimpleImputer\n","imputer2 = SimpleImputer(strategy=\"mean\")\n","\n","df_copy=df\n","\n","# Step 2: Fit the imputer on the \"Age\" and \"Salary\"column\n","# Note: SimpleImputer expects a 2D array, so we reshape the column\n","\n","imputer2.fit(df_copy[[\"YearsExperience\"]])\n","\n","# Step 3: Transform (fill) the missing values in the \"Age\" and \"Salary\"c column\n","\n","df_copy[\"YearsExperience\"] = imputer2.transform(df[[\"YearsExperience\"]])\n","\n","# Verify that there are no missing values left\n","\n","print(df_copy[\"YearsExperience\"].isnull().sum())\n","\n","plt.xlabel('YearsExperience')\n","plt.ylabel('Salary')\n","plt.scatter(df_copy['YearsExperience'], df_copy['Salary'], color='red', marker='+')\n","plt.show()\n","\n","X = df_copy[['YearsExperience']] #independent\n","y = df_copy['Salary'] #dependent\n","\n","reg = linear_model.LinearRegression()\n","reg.fit(X,y)\n","predicted_salary = reg.predict([[12]])\n","print(predicted_salary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":781},"id":"Dp3ZDQbKyMiD","executionInfo":{"status":"ok","timestamp":1741588923308,"user_tz":-330,"elapsed":1343,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"bcab1f82-d9af-497a-ca65-b44622eb0478"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["   YearsExperience  Salary\n","0              1.1   39343\n","1              1.3   46205\n","2              1.5   37731\n","3              2.0   43525\n","4              2.2   39891\n","   YearsExperience  Salary\n","0              1.1   39343\n","1              1.3   46205\n","2              1.5   37731\n","3              2.0   43525\n","4              2.2   39891\n","YearsExperience    2\n","dtype: int64\n","0\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[139980.88923969]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["#multiple linear regression\n","#code  5\n","from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"eqEAQRTny0Yz","executionInfo":{"status":"ok","timestamp":1741589063095,"user_tz":-330,"elapsed":6988,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"fa3a0bdf-f54a-40ee-f911-bfec88cdc086"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-2d3fbb73-0fa8-48bb-be54-392a3a067ed7\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-2d3fbb73-0fa8-48bb-be54-392a3a067ed7\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving hiring.csv to hiring (1).csv\n"]}]},{"cell_type":"code","source":["#hiring\n","import pandas as pd\n","import io\n","from sklearn import linear_model\n","import numpy as np\n","from sklearn.preprocessing import OrdinalEncoder\n","from sklearn.impute import SimpleImputer\n","\n","df = pd.read_csv(\"hiring.csv\")\n","print(df.head())\n","\n","df.replace(' ',np.nan,inplace = True)\n","print(df.head())\n","\n","missing_values = df.isnull().sum()\n","# Display columns with missing values\n","print(missing_values[missing_values > 0])\n","\n","\n","df['experience'].fillna(\"unknown\", inplace=True)\n","print(df.head())\n","\n","\n","\n","#handle missing values\n","ordinal_encoder = OrdinalEncoder(categories=[[\"unknown\",\"one\", \"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\"]])\n","# Fit and transform the data\n","df['experience_encoded'] = ordinal_encoder.fit_transform(df[['experience']])\n","\n","print(df.head())\n","\n","df.drop('experience',axis = 1,inplace = True)\n","print(df.head())\n","\n","from sklearn.impute import SimpleImputer\n","imputer2 = SimpleImputer(strategy=\"mean\")\n","\n","df_copy=df\n","\n","# Step 2: Fit the imputer on the \"Age\" and \"Salary\"column\n","# Note: SimpleImputer expects a 2D array, so we reshape the column\n","\n","imputer2.fit(df_copy[[\"test_score(out of 10)\"]])\n","\n","# Step 3: Transform (fill) the missing values in the \"Age\" and \"Salary\"c column\n","\n","df_copy[\"test_score(out of 10)\"] = imputer2.transform(df[[\"test_score(out of 10)\"]])\n","\n","# Verify that there are no missing values left\n","\n","print(df_copy[\"test_score(out of 10)\"].isnull().sum())\n","\n","X = df_copy[['test_score(out of 10)','interview_score(out of 10)','experience_encoded']]\n","y = df_copy[['salary($)']]\n","\n","reg = linear_model.LinearRegression()\n","reg.fit(X,y)\n","predicted_salary = reg.predict([[2,9,6]])\n","print(predicted_salary)\n","\n","predicted_salary = reg.predict([[12,10,10]])\n","print(predicted_salary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"sixI00qRzDYE","executionInfo":{"status":"ok","timestamp":1741589763376,"user_tz":-330,"elapsed":67,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"ace43293-b64e-4448-da49-81054fd5b5fb"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["  experience  test_score(out of 10)  interview_score(out of 10)  salary($)\n","0        NaN                    8.0                           9      50000\n","1        NaN                    8.0                           6      45000\n","2       five                    6.0                           7      60000\n","3        two                   10.0                          10      65000\n","4      seven                    9.0                           6      70000\n","  experience  test_score(out of 10)  interview_score(out of 10)  salary($)\n","0        NaN                    8.0                           9      50000\n","1        NaN                    8.0                           6      45000\n","2       five                    6.0                           7      60000\n","3        two                   10.0                          10      65000\n","4      seven                    9.0                           6      70000\n","experience               2\n","test_score(out of 10)    1\n","dtype: int64\n","  experience  test_score(out of 10)  interview_score(out of 10)  salary($)\n","0    unknown                    8.0                           9      50000\n","1    unknown                    8.0                           6      45000\n","2       five                    6.0                           7      60000\n","3        two                   10.0                          10      65000\n","4      seven                    9.0                           6      70000\n","  experience  test_score(out of 10)  interview_score(out of 10)  salary($)  \\\n","0    unknown                    8.0                           9      50000   \n","1    unknown                    8.0                           6      45000   \n","2       five                    6.0                           7      60000   \n","3        two                   10.0                          10      65000   \n","4      seven                    9.0                           6      70000   \n","\n","   experience_encoded  \n","0                 0.0  \n","1                 0.0  \n","2                 5.0  \n","3                 2.0  \n","4                 7.0  \n","   test_score(out of 10)  interview_score(out of 10)  salary($)  \\\n","0                    8.0                           9      50000   \n","1                    8.0                           6      45000   \n","2                    6.0                           7      60000   \n","3                   10.0                          10      65000   \n","4                    9.0                           6      70000   \n","\n","   experience_encoded  \n","0                 0.0  \n","1                 0.0  \n","2                 5.0  \n","3                 2.0  \n","4                 7.0  \n","0\n","[[57801.7884606]]\n","[[90438.68025262]]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-15-885684c19c67>:20: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['experience'].fillna(\"unknown\", inplace=True)\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"29RIsaDC2pzT","executionInfo":{"status":"ok","timestamp":1741590744053,"user_tz":-330,"elapsed":7973,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"689f20c7-4e37-4bb8-fc12-17eebc4abfda"},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-b73d19f3-4148-412b-97ae-312a306c7689\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-b73d19f3-4148-412b-97ae-312a306c7689\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving 1000_Companies.csv to 1000_Companies (4).csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LinearRegression\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Load company data\n","df_companies = pd.read_csv('1000_Companies.csv')\n","\n","# Handle categorical variable (State)\n","label_encoder = LabelEncoder()\n","df_companies['State'] = label_encoder.fit_transform(df_companies['State'])\n","\n","# Define features and target variable\n","X_companies = df_companies[['R&D Spend', 'Administration', 'Marketing Spend', 'State']]\n","y_companies = df_companies['Profit']\n","\n","# Handle missing values by filling with median\n","df_companies.fillna(df_companies.median(), inplace=True)\n","\n","# Train the model\n","reg_companies = LinearRegression()\n","reg_companies.fit(X_companies, y_companies)\n","\n","# Predict profit for given data\n","input_data = np.array([[91694.48, 515841.3, 11931.24, label_encoder.transform(['Florida'])[0]]])\n","predicted_profit = reg_companies.predict(input_data)\n","\n","print(f\"Predicted profit: {predicted_profit[0]:.2f} USD\")\n","\n","# Plot actual vs predicted profits\n","plt.scatter(y_companies, reg_companies.predict(X_companies), color='blue', label='Predicted vs Actual')\n","plt.xlabel(\"Actual Profit\")\n","plt.ylabel(\"Predicted Profit\")\n","plt.title(\"Actual vs Predicted Profit\")\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":544},"id":"nFvIAa2T5eY8","executionInfo":{"status":"ok","timestamp":1741590797203,"user_tz":-330,"elapsed":443,"user":{"displayName":"Tamanna Rukhaya","userId":"08941880618360344013"}},"outputId":"675a8bfc-c49e-4a8f-c0d4-5fef65eaa9ec"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Predicted profit: 511209.20 USD\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}